@page "/Categories"

@using Library.Web.Components.CategoriesComponents

@inject ICategoryService DomainCategoryService
@inject ILibraryItemService DomainLibraryItemService


<h1>Categories</h1>

<button class="btn btn-primary" @onclick="@(() => ShowModalAddOrEdit())">AddCategory</button>


@if (CategoriesListService.Message != "")
{
    <div class="alert alert-primary" role="alert">
        @CategoriesListService.Message
    </div>
}


<table class="table table-striped">
    <thead>
        <tr>
            <td>Name</td>
            <td>Number of connected items</td>
            <td>Actions</td>
        </tr>
    </thead>
    <tbody>
        @foreach (var category in CategoriesListService.Categories)
        {
            <tr>
                <td>@category.CategoryName</td>
                <td>@CategoriesListService.LibraryItems.Where(l => l.CategoryId == category.Id).Count()</td>
                <td> <CategoryButtons CategoriesListService="@CategoriesListService" Category="@category" /> </td>
            </tr>
        }
    </tbody>
</table>



@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    public CategoriesListUIService CategoriesListService;

    protected override void OnInitialized()
    {
        CategoriesListService = new();
        CategoriesListService.Categories = DomainCategoryService.GetCategories();
        CategoriesListService.LibraryItems = DomainLibraryItemService.GetLibraryItems();
        CategoriesListService.Message = "";
        CategoriesListService.RefreshRequested += RefreshMe;

    }

    private void ShowModalAddOrEdit()
    {
        var parameters = new ModalParameters();
        parameters.Add("AddItem", true);
        parameters.Add("CategoriesListService", CategoriesListService);

        Modal.Show<EditOrAddCategory>("Add Category", parameters);
    }

    private void RefreshMe()
    {
        StateHasChanged();
    }
}
